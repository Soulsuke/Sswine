var search_data = {"index":{"searchIndex":["gilt","ham","oink","sswine","checkentry()","executecommand()","getdesktopentries()","gethamenv()","killallhams()","killham()","new()","new()","new()","oink()","openshell()","openshell()","updateallhams()","updateham()","writemenuentries()","readme"],"longSearchIndex":["gilt","ham","oink","sswine","ham#checkentry()","gilt#executecommand()","ham#getdesktopentries()","ham#gethamenv()","sswine#killallhams()","ham#killham()","gilt::new()","ham::new()","sswine::new()","oink#oink()","ham#openshell()","sswine#openshell()","sswine#updateallhams()","ham#updateham()","sswine#writemenuentries()",""],"info":[["Gilt","","Gilt.html","","<p>Gilt: a GTK3 GUI for Sswine.\n<p>I&#39;m doing this against my better judgement. I do not like GUIs, I\nbelieve …\n"],["Ham","","Ham.html","","<p>Ham class.\n<p>A ham is a chunk of a swine. So, every sub-directory of .sswine is, by\ndefinition a Ham. Edible …\n"],["Oink","","Oink.html","","<p>This module&#39;s purpose to handle logs on behalf of the other classes.\n<p>To work as intended, it requires …\n"],["Sswine","","Sswine.html","","<p>Sswine stands for “Sswine: split wine”.\n<p>This class is designed to handle Hams located in $HOME/.sswine. …\n"],["checkEntry","Ham","Ham.html#method-i-checkEntry","( entry, key )","<p>Checks if the given entry is valid, and makes sure the Path and Icon  keys\nwill point to, respectively, …\n"],["executeCommand","Gilt","Gilt.html#method-i-executeCommand","()","<p>Private method. Handles the logic of the “Execute!” button. Returns the\ntext to show on the …\n"],["getDesktopEntries","Ham","Ham.html#method-i-getDesktopEntries","()","<p>Generates .desktop files for every entry in the config file (of course, \nexcept for Global Values), then …\n"],["getHamEnv","Ham","Ham.html#method-i-getHamEnv","()","<p>Returns a string containing the “env &lt;variables&gt;” command needed to\nrun wine binaries …\n"],["killAllHams","Sswine","Sswine.html#method-i-killAllHams","()","<p>Terminates every Ham (alive or not).\n"],["killHam","Ham","Ham.html#method-i-killHam","()","<p>Runs “wineserver -k” to kill any wine process for this Ham&#39;s wine\nbottle.\n"],["new","Gilt","Gilt.html#method-c-new","()","<p>Constructor. It is supposed to initialize and show the GUI.\n"],["new","Ham","Ham.html#method-c-new","( options = {} )","<p>Constructor. To work properly, the following should be provided: :path\n=&gt; path to the folder which …\n"],["new","Sswine","Sswine.html#method-c-new","( options = { :logs => \"off\" } )","<p>Constructor. To work properly, the following should be provided: :logs\n=&gt; on/off/gui, modality to …\n"],["oink","Oink","Oink.html#method-i-oink","( *logs )","<p>This function will handle the logs.\n"],["openShell","Ham","Ham.html#method-i-openShell","()","<p>Opens a shell for this Ham in its wine_env/drive_c folder.\n"],["openShell","Sswine","Sswine.html#method-i-openShell","()","<p>Prints a list of all the available hams, then makes the user chose one. A\nshell will be opened in such …\n"],["updateAllHams","Sswine","Sswine.html#method-i-updateAllHams","()","<p>Attempts to update every Ham.\n"],["updateHam","Ham","Ham.html#method-i-updateHam","()","<p>Runs wineboot, to attempt to update this Ham&#39;s wine bottle without\nmaking other changes.\n"],["writeMenuEntries","Sswine","Sswine.html#method-i-writeMenuEntries","()","<p>Creates a menu folder for Sswine, and adds to it an entry for each valid\none of each Ham.\n"],["README","","README_md.html","","<p>Sswine\n<p>Sswine, which stands for “Sswine: split wine”.\n<p>General\n"]]}}