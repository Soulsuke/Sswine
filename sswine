#! /usr/bin/env ruby

require "fiddle"
require "pathname"
require "#{Pathname.new( $0 ).realpath.dirname}/lib/oink.rb"
require "#{Pathname.new( $0 ).realpath.dirname}/lib/sswine.rb"

=begin
A simple launcher for Sswine!  
This file must remain within Sswine's folder, but it can be symlinked anywhere.
There are no other requirements, really.  
It uses a class so it can include the Oink module without any issue.  
=end

class SswineLauncher
  # Our logger:
  include Oink

  # Constructor. It does nothing, really.
  def initialize
    oink_initialize
  end

  # Private method. Contains the help reference of command line Sswine.
  private
  def showHelp
    # Array containing various lines of the help reference:
    lines = Array.new
  
    # Help reference lines:
    # Header:
    lines.push "#{@colors[:yellow]}Sswine: split wine.#{@colors[:default]}"
    lines.push "#{@colors[:yellow]}Usage:#{@colors[:default]}"
    # Check hams:
    lines.push "#{@colors[:blue]}#{$0} -c/--check#{@colors[:default]}: " +
               "checks each entry of each Ham for errors. No output means " +
               "that everything is ok."
    # Write .desktop files:
    lines.push "#{@colors[:blue]}#{$0} -d/--desktop#{@colors[:default]}: " +
               "writes .desktop files for each valid entry of each edible Ham."
    # GTK3 GUI:
    lines.push "#{@colors[:blue]}#{$0} -g/--gui#{@colors[:default]}: " +
               "launches the GTK3 GUI."
    # Help reference:
    lines.push "#{@colors[:blue]}#{$0} -h/--help#{@colors[:default]}: " +
               "shows this help reference."
    # Kill all hams:
    lines.push "#{@colors[:blue]}#{$0} -k/--kill#{@colors[:default]}: " +
               "runs 'wineserver -k' for each Ham."
    # Open shell:
    lines.push "#{@colors[:blue]}#{$0} -s/--shell#{@colors[:default]}: " +
               "prompts the user to choose an edible Ham. Then, the user's " +
               "default shell is opened in the choosen entry's folder, with " +
               "the WINEPREFIX variable correctly set."
    # Update all hams:
    lines.push "#{@colors[:blue]}#{$0} -u/--update#{@colors[:default]}: " +
               "runs 'wineboot' for each edible Ham. This is supposed to " +
               "update wine files on each of them."

    # Finally, log everything!
    oink *lines
  end

  # Depending on command line arguments, starts Sswine in a different way.
  public
  def squealForMe( args )
    # First off, attempt to set the process name:
    begin
      handle = defined?(DL::Handle) ? DL::Handle : Fiddle::Handle
      Fiddle::Function.new(
        handle['prctl'.freeze],
        [ Fiddle::TYPE_INT, Fiddle::TYPE_VOIDP, Fiddle::TYPE_LONG,
          Fiddle::TYPE_LONG, Fiddle::TYPE_LONG
        ],
        Fiddle::TYPE_INT
      ).call(15, "sswine", 0, 0, 0)
    rescue
      # I really don't want to put a warning message here, really... It'd be
      # quite annoying to see it everytime on systems where prctl isn't
      # supported, right?
    end
 
    if 1 == args.size then
    
      # Check Hams and their entries for errors:
      if [ "-c", "--check" ].include? args[0] then
        s = Sswine.new :logs => :on
    
      # Create desktop files:
      elsif [ "-d", "--desktop" ].include? args[0] then
        s = Sswine.new :logs => :on
        s.writeMenuEntries
    
      # Launch the GTK3 GUI:
      elsif [ "-g", "--gui" ].include? args[0] then
        # It gets required here, so that GTK3 is not a mandatory dependency
        # to run Sswine.
        begin
          require "#{Pathname.new( $0 ).realpath.dirname}/lib/gilt.rb"
    
        rescue LoadError
          puts "#{@colors[:red]}!!! Error:#{@colors[:default]} " +
               "Failed to start the GUI! Is the gem `gtk3` correctly " +
               "installed?"
          exit -1
        end
    
        Gilt.new
    
      # Help reference:
      elsif [ "-h", "--help" ].include? args[0] then
        showHelp
    
      # Kill all hams:
      elsif [ "-k", "--kill" ].include? args[0] then
        s = Sswine.new
        s.killAllHams
    
      # Run a shell for a ham:
      elsif [ "-s", "--shell" ].include? args[0] then
        s = Sswine.new
        s.openShell
    
      # Update all hams:
      elsif [ "-u", "--update" ].include? args[0] then
        s = Sswine.new
        s.updateAllHams
      end
    
      exit 0
    
    # Wrong number of parameters:
    else
      showHelp
      exit -1
    end
  end

end

sl = SswineLauncher.new
sl.squealForMe ARGV

